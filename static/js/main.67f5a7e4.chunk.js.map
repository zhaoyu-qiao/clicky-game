{"version":3,"sources":["components/Nav/index.js","components/Footer/index.js","components/Wrapper/index.js","components/Container/index.js","components/FriendCard/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["navbar","backgroundColor","Nav","props","id","className","style","href","score","highscore","footer","Width","height","padding","Footer","Wrapper","children","Container","FriendCard","onClick","handleClick","alt","name","src","image","occupation","movie","Title","App","state","friends","animation","bottom","position","width","friendIndex","dontMessWithState","Array","console","log","forEach","value","index","clicked","reset","setState","highScore","shuffle","alert","clearCliked","array","friend","currentScore","input","v","i","swap","Math","floor","random","length","a","b","temp","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67f5a7e4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nconst navbar = {\n  backgroundColor: \"black\"\n};\n\nfunction Nav(props) {\n  return (\n    <div>\n      <nav id=\"nav\" className=\"navbar\" style={navbar}>\n        <ul>\n          <li className=\"brand\">\n            <a id=\"a\" href=\"/\">\n              Clicky Game{\" \"}\n            </a>{\" \"}\n          </li>{\" \"}\n          <li className=\"li\">Click an image to begin!</li>{\" \"}\n          <li className=\"li\">\n            {\" \"}\n            Score: {props.score} | Top Score: {props.highscore}{\" \"}\n          </li>{\" \"}\n        </ul>{\" \"}\n      </nav>{\" \"}\n    </div>\n  );\n}\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst footer = {\n  Width:\"100%\",\n  height:\"100%\",\n  padding:\"20px\"\n};\n\nfunction Footer() {\n  return (\n    <div>\n      <footer className=\"page-footer font-small special-color-dark\" style={footer}>\n          \n              <a id=\"af\"\n                className=\"btn-floating btn-dribbble mx-1\"\n                href=\"https://github.com/zhaoyu-qiao/clicky-game\"\n              >\n                Here's the Github Link\n              </a>\n        \n      </footer>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\"> {props.children} </div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className=\"container\"> {props.children} </div>;\n}\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\n// if non of them is clicked, on click, score +1, shuffle, change isclicked to true\n// if the one that's clicked has isclicked to true, reset score, reset game, css shake\n// there should be an event listener, if a friend card is clicked,\n// change something that's displayed on nav using a method.\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.handleClick(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Movie:</strong> {props.movie}\n          </li>\n        </ul>\n      </div>\n      <span className=\"remove\">\n      \n      </span>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className = \"title rainbow-text\" > {\n    props.children\n  } </h1>;\n}\n\nexport default Title;","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav/index\";\nimport Footer from \"./components/Footer/index\";\nimport Wrapper from \"./components/Wrapper\";\nimport Container from \"./components/Container\";\nimport friends from \"./friends.json\";\nimport FriendCard from \"./components/FriendCard\";\nimport Title from \"./components/Title\";\n\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    score: 0,\n    highscore: 0,\n    animation: \"none\"\n  };\n  bottom= {\n    position: \"absolute\",\n    bottom: \"0px\",\n    width: \"100%\"\n  }\n\n  handleClick = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    // const friends = this.state.friends.filter(friend => friend.id !== id);\n    // // Set this.state.friends equal to the new friends array\n    // this.setState({ friends });\n\n    // create a teporary array so we don't mess with the existing state\n    let dontMessWithState = new Array(...this.state.friends);\n\n    console.log(\"DMWS Index: \", dontMessWithState);\n\n    let friendIndex;\n    // compare the id of the friend card being clicked, when it is equal to\n    dontMessWithState.forEach((value, index) => {\n      if (value.id === id) {\n        if (value.clicked) {\n          // reset function and css shake\n          this.reset();\n        } else {\n          friendIndex = index;\n          value.clicked = true;\n          this.setState({\n            score: this.state.score + 1\n          });\n          this.highScore();\n        }\n      }\n    });\n\n    dontMessWithState = this.shuffle(dontMessWithState);\n    console.log(\"Friend Index: \", friendIndex);\n    console.log(\"Friend idï¼š\", id);\n    console.log(\"DMWS after: \", dontMessWithState);\n\n    // change the state with the new shuffled friends array\n    this.setState({\n      friends: dontMessWithState\n    });\n  };\n  // shuffle method, use swap to swap the current index with a random index.\n  shuffle(input) {\n    console.log(\"shuffling\");\n    input.forEach((v, i) => {\n      this.swap(input, i, Math.floor(Math.random() * input.length));\n    });\n\n    return input;\n  }\n  // swap array index's order\n  swap(array, a, b) {\n    let temp = array[a];\n    array[a] = array[b];\n    array[b] = temp;\n  }\n\n  // reset method\n  reset = () => {\n    // shake images\n    alert(\"You clicked one friend twice!\")\n    this.setState({\n      score: 0\n    });\n    // deep clone the friends array in state so you don't mess with state.\n    let dontMessWithState = new Array(...this.state.friends);\n    // set clicked to false for each of the friend clicked attribute\n    dontMessWithState = this.clearCliked(dontMessWithState);\n    // return the new friends array to state so that all the clicked are false\n    this.setState({\n      friends: dontMessWithState\n    });\n  };\n  \n  // clearClicked takes in an array, and for each of the object in the array, change its property clicked with value false.\n  clearCliked=(array)=>{\n    array.forEach(friend=>{\n      friend.clicked=false\n    })\n\n  }\n\n  // compare score and highscore, if score is higher than highscore, change state.highscore with score's value\n  highScore =()=>{\n    let currentScore = this.state.score;\n    if (this.state.score>=this.state.highscore){\n      this.setState({highscore:currentScore+1})\n    }\n  }\n  // shake method to add animation:shake to friend card\n  // shake = ()=>{\n  //   this.setState({animation:this.state.animation.shake})\n  // }\n\n  // define the shake method\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Nav score={this.state.score} highscore={this.state.highscore} />{\" \"}\n        <Container>\n          <Title> Friends List </Title>{\" \"}\n          {this.state.friends.map(friend => (\n            <FriendCard\n              style={this.state.animation}\n              handleClick={this.handleClick}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n              occupation={friend.occupation}\n              movie={friend.movie}\n              //clicked={friend.clicked}\n            />\n          ))}{\" \"}\n        </Container>{\" \"}\n        <Footer style={this.bottom}/>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}