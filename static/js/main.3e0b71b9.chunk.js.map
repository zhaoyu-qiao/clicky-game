{"version":3,"sources":["components/Nav/index.js","components/Footer/index.js","components/Wrapper/index.js","components/Container/index.js","components/FriendCard/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["navbar","backgroundColor","Nav","props","id","className","style","href","score","Footer","height","alt","src","Wrapper","children","Container","FriendCard","onClick","handleClick","name","image","occupation","movie","Title","App","state","friends","animation","friendIndex","dontMessWithState","Array","console","log","forEach","value","index","clicked","reset","setState","shuffle","input","v","i","swap","Math","floor","random","length","array","a","b","temp","this","map","friend","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e0b71b9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nconst navbar = { backgroundColor: \"black\" };\n// const rainbow1 = {background-image: \"linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red)\"};\n// const rainbow2 = {-webkit-background-clip: \"text\"};\n// const rainbow3 = {-webkit-text-fill-color: \"transparent\"};\n\n//#c35b6c   #f9ec62\nfunction Nav(props) {\n  return (\n    <div>\n      <nav id=\"nav\" className=\"navbar\" style={navbar}>\n        <ul>\n          <li className=\"brand\">\n            <a id=\"a\" href=\"/\">\n              Clicky Game\n            </a>\n          </li>\n          <li className=\"li\">\n            Click an image to begin!\n          </li>\n          <li className=\"li\">Score: {props.score} | Top Score: 0</li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\nexport default Nav;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div>\n      <footer className=\"footer\"  style={{height:100}}>\n        <div className=\"bottom\">\n          Clicky Game! <img alt=\"react\" src=\"assets/images/react.svg\" />\n        </div>{\" \"}\n      </footer>{\" \"}\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\"> {props.children} </div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className=\"container\"> {props.children} </div>;\n}\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n//import friends from \"../friends.json\";\nimport { render } from \"@testing-library/react\";\n\n// if non of them is clicked, on click, score +1, shuffle, change isclicked to true\n// if the one that's clicked has isclicked to true, reset score, reset game, css shake\n// there should be an event listener, if a friend card is clicked,\n// change something that's displayed on nav using a method.\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.handleClick(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Movie:</strong> {props.movie}\n          </li>\n        </ul>\n      </div>\n      <span className=\"remove\">\n      \n      </span>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className = \"title rainbow-text\" > {\n    props.children\n  } </h1>;\n}\n\nexport default Title;","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav/index\";\nimport Footer from \"./components/Footer/index\";\nimport Wrapper from \"./components/Wrapper\";\nimport Container from \"./components/Container\";\nimport friends from \"./friends.json\";\n//import Counter from \"./components/Counter\";\nimport FriendCard from \"./components/FriendCard\";\nimport Title from \"./components/Title\";\n\n//import logo from \"./logo.svg\";\n\nimport \"./App.css\";\nimport { render } from \"@testing-library/react\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    score:0,\n    animation:'none'\n  };\n\n  handleClick = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    // const friends = this.state.friends.filter(friend => friend.id !== id);\n    // // Set this.state.friends equal to the new friends array\n    // this.setState({ friends });\n\n    // create a teporary array so we don't mess with the existing state\n    let dontMessWithState= new Array(...this.state.friends)\n\n    console.log(\"DMWS Index: \",dontMessWithState)\n\n    let friendIndex;\n    // compare the id of the friend card being clicked, when it is equal to \n    dontMessWithState.forEach((value,index)=>{\n      if(value.id===id)\n      {\n        if(value.clicked){\n          // reset function and css shake\n          this.reset();\n        }else{\n        friendIndex=index;\n        value.clicked=true;\n        this.setState({score: this.state.score+1})\n        }\n      }\n    })\n\n    dontMessWithState= this.shuffle(dontMessWithState);\n    console.log(\"Friend Index: \",friendIndex)\n    console.log(\"Friend idï¼š\",id)\n    console.log(\"DMWS after: \",dontMessWithState)\n\n    // change the state with the new shuffled friends array \n    this.setState({friends:dontMessWithState})\n\n  };\n  // shuffle method, use swap to swap the current index with a random index.\n  shuffle(input){\n    console.log(\"shuffling\")\n    input.forEach((v,i)=>{\n      this.swap(input, i, Math.floor(Math.random()* input.length))\n    })\n\n    return input\n  }\n  // swap array index's order\n  swap(array,a,b){\n    let temp= array[a]\n    array[a]=array[b]\n    array[b]= temp\n  }\n\n  // reset method\n  reset = ()=>{\n    // shake images\n    this.setState({score:0})\n  }\n  \n  // shake method to add animation:shake to friend card\n  // shake = ()=>{\n  //   this.setState({animation:this.state.animation.shake})\n  // }\n\n  // define the shake method\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Nav score={this.state.score}/>\n        <Container>\n          <Title>Friends List</Title>\n          {this.state.friends.map(friend => (\n            <FriendCard\n              style={this.state.animation}\n              handleClick={this.handleClick}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n              occupation={friend.occupation}\n              movie={friend.movie}\n              //clicked={friend.clicked}\n            />\n          ))}\n        </Container>\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}